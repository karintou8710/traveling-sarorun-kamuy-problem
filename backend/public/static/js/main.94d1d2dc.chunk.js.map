{"version":3,"sources":["components/assets/otaru.png","components/assets/sapporo.jpg","components/assets/muroran.jpg","components/assets/shiretoko.jpg","components/assets/asahikawa.jpg","components/CityIcon.tsx","components/CityPanel.tsx","components/ShowOptimalRoute.tsx","pages/TravelingSarorunKamuy.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CityIcon","props","city_name","src","require","default","width","height","CityPanel","arrival_time","MainContainer","A","styled","div","ShowOptimalRoute","route","time","convertToTime","n","hh","Math","floor","mm","String","map","city","index","TravelingSarorunKamuy","useState","cities","selectedCityIDs","setSelectedCityIDs","isSubmit","setIsSubmit","useEffect","getCities","url","alert","fetch","checked","onChange","arr","i","length","push","handleCheckboxChange","icon","intent","text","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.94d1d2dc.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/otaru.e2154a2a.png\";","export default __webpack_public_path__ + \"static/media/sapporo.31ea8ff1.jpg\";","export default __webpack_public_path__ + \"static/media/muroran.9e2cde3a.jpg\";","export default __webpack_public_path__ + \"static/media/shiretoko.f743dddc.jpg\";","export default __webpack_public_path__ + \"static/media/asahikawa.9a0643e3.jpg\";","import React from \"react\";\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\nimport \"@blueprintjs/icons/lib/css/blueprint-icons.css\";\nimport styled from \"styled-components\";\n\ninterface Props {\n    city_name: string,\n}\n\nfunction CityIcon(props: Props) {\n\n  const {city_name} = props;\n  \n  return (\n    <div>\n        {city_name === \"小樽\" ? <img src={require('./assets/otaru.png').default} width=\"300\" height=\"auto\"/> : null}\n        \n        {city_name === \"札幌\" ? <img src={require('./assets/sapporo.jpg').default} width=\"300\" height=\"auto\" /> : null}\n\n        {city_name === \"室蘭\" ? <img src={require('./assets/muroran.jpg').default} width=\"300\" height=\"auto\" /> : null}\n\n        {city_name === \"知床\" ? <img src={require('./assets/shiretoko.jpg').default} width=\"300\" height=\"auto\"/> : null}\n\n        {city_name === \"旭川\" ? <img src={require('./assets/asahikawa.jpg').default} width=\"300\" height=\"auto\" /> : null}\n    </div>\n    \n\n  );\n  \n\n}\n\n\n\n\nexport default CityIcon;\n\n","import React from \"react\";\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\nimport \"@blueprintjs/icons/lib/css/blueprint-icons.css\";\nimport styled from \"styled-components\";\n\nimport CityIcon from \"./CityIcon\";\n\ninterface Props {\n    city_name: string,\n    arrival_time: string,\n}\n\nfunction CityPanel(props: Props) {\n  \n  const {city_name, arrival_time} = props;\n  \n  return (\n    <MainContainer>\n        <A>{city_name}</A>\n        <A>{arrival_time}</A>\n        \n          <CityIcon city_name={city_name} />\n    </MainContainer>\n\n  );\n}\n\nexport default CityPanel;\n\nconst MainContainer = styled.div`\n  color: #763f2d ;\n  fontSize: 30;\n  background-color:  #03a8d6;\n  alignItems: center;\n  display: flex;\n  padding: 60px;\n  list-style: none;\n  margin: 0px;\n  width: 100%;\n  \n  \n`\n\nconst A  = styled.div`\n\nmargin: 60px;\nfont-size:80px;\n\n`\n\n\n\n\n\n","import React from \"react\";\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\nimport \"@blueprintjs/icons/lib/css/blueprint-icons.css\";\nimport styled from \"styled-components\";\n\nimport CityPanel from \"./CityPanel\";\nimport {FormGroup} from \"@blueprintjs/core\";\n\n// このコンポーネントがやること：\n// 1. 選択された都市の表示\n// 2. 経路を可視化？（TODO）\n\n// こいつは、もらってきた props を綺麗に表示するだけ\n\ninterface Props {\n  route: string[],\n  time: number[],\n}\n\nfunction ShowOptimalRoute(props: Props) {\n\n  const {route, time} = props;\n  const arrival_times: string[] = [\"1\",\"2\",\"3\",\"4\",\"5\"];\n  const city_names: string[] = [\"札幌\",\"小樽\",\"知床\",\"室蘭\",\"旭川\"];\n\n\n  const convertToTime = (n: number): string => {\n    const hh: number = Math.floor(n / 60);\n    const mm: number = n % 60;\n    return String(hh) + \":\" + String(mm);\n  }\n\n  return (\n    <div>\n      {route.map((city, index) =>\n        <>\n          <CityPanel city_name={route[index]} arrival_time={convertToTime(time[index])} />\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default ShowOptimalRoute;\n\nconst HogeContainer = styled.div`\n  color: red;\n  size: 40px;\n`\nconst HugaContainer = styled.div`\n  color: blue;\n`\n\n// css\n// #hoge {\n//   color: red;  \n// }\n","import React, {useState, useEffect} from \"react\";\nimport {Button, Checkbox} from \"@blueprintjs/core\";\nimport ShowOptimalRoute from \"../components/ShowOptimalRoute\";\nimport { CITIES } from '../config/constant';\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\nimport \"@blueprintjs/icons/lib/css/blueprint-icons.css\";\n\n// このコンポーネントがやること：\n// 1. プルダウンから、主要都市を複数選択して、送信ボタンを押してもらう\n// 2. 選択数のバリデーションをかける（一件も選択されていなかったら、だめ）（21 件以上選択されていたらだめ）\n// 3. 子供コンポーネントに、選択された都市の情報を props で渡す\n// 4. 経路の描画、経路の計算（API call）などは、子供に任せる\n\nfunction TravelingSarorunKamuy() {\n\n  // TODO, 別の定数ファイルに定義した方が良い？\n  // const cities: string[] = ['札幌', '函館', '旭川', '苫小牧', '小樽'];\n  // const cities = CITIES\n  const [cities, setCities] = useState<string[]>([]);\n  const [selectedCityIDs, setSelectedCityIDs] = useState<boolean[]>([]);\n  const [isSubmit, setIsSubmit] = useState<boolean>(false);\n\n  useEffect(() => {\n    getCities();\n  }, []);\n\n  // チェックボックスが押されたタイミングで、状態を更新する\n  const handleCheckboxChange = (index: number): void => {\n    let arr: boolean[] = [];\n    for (let i = 0; i < cities.length; i++) {\n      if (i === index) {\n        arr.push(!selectedCityIDs[i]);\n      } else {\n        arr.push(selectedCityIDs[i]);\n      }\n    }\n    setSelectedCityIDs(arr);\n  }\n\n  const handleSubmit = (): void => {\n    // TODO: ここで API call して、情報詰めて、ShowOptimalRoute くんに props として渡す\n\n    setIsSubmit(true);\n  }\n\n  const getCities = (): void => {\n    const url = 'http://localhost:8000/api/cities/';\n    alert(url);\n    const method = 'GET';\n    const headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n    fetch(url);\n    // fetch(url, {method, headers}).then((response) => {\n    //   if (response.ok) {\n    //     // To do\n    //     console.log(\"called api\");\n    //     console.log(response);\n    //   }\n    //   // setCities(CITIES);\n    // });\n  } \n\n  const getCalc = (): void => {\n    const url = 'api/calc';\n    const method = 'POST';\n    const headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n    const body = JSON.stringify({\n      // body: text,\n      // qid: questionId,\n    });\n    fetch(url, {method, headers, body}).then((response) => {\n      if (response.ok) {\n        // 親コンポーネントに発火させる\n        // To do\n      }\n    });\n  }\n\n\n  return (\n    <div>\n      <h1>TravelingSarorunKamuy</h1>\n      {cities.map((city, index) =>\n        <>\n          <p>{city}</p>\n          <Checkbox key={index} checked={selectedCityIDs[index]} onChange={() => {\n            handleCheckboxChange(index);\n          }}/>\n        </>\n      )}\n      <Button icon=\"search\" intent=\"success\" text=\"Go\" onClick={() => {\n        handleSubmit();\n      }}/>\n      {isSubmit ? <ShowOptimalRoute route={cities} time={[0, 40, 333, 523, 3336]} /> : null}\n    </div>\n  );\n}\n\nexport default TravelingSarorunKamuy;\n","import React from 'react';\nimport TravelingSarorunKamuy from './pages/TravelingSarorunKamuy';\n\n// TODO: router を導入する？\nfunction App() {\n  return (\n    <div>\n      <TravelingSarorunKamuy />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}